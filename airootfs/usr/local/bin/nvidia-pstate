#!/usr/bin/env python3

import argparse
import ctypes

# Library
_lib = ctypes.CDLL("libnvidia-api.so")

# QueryInterface
_nvapi_QueryInterface = _lib.nvapi_QueryInterface
_nvapi_QueryInterface.argtypes = [ctypes.c_int]
_nvapi_QueryInterface.restype = ctypes.c_void_p
def nvapi_QueryInterface(address: int) -> ctypes.c_void_p:
  return _nvapi_QueryInterface(address)

# Initialize NvAPI
_NvAPI_Initialize_ptr   = nvapi_QueryInterface(0x0150e828)
_NvAPI_Initialize_proto = ctypes.CFUNCTYPE(ctypes.c_int)
_NvAPI_Initialize       = ctypes.cast(_NvAPI_Initialize_ptr, _NvAPI_Initialize_proto)
def NvAPI_Initialize() -> int:
  return _NvAPI_Initialize()

# Unload NvAPI
_NvAPI_Unload_ptr   = nvapi_QueryInterface(0xd22bdd7e)
_NvAPI_Unload_proto = ctypes.CFUNCTYPE(ctypes.c_int)
_NvAPI_Unload       = ctypes.cast(_NvAPI_Unload_ptr, _NvAPI_Unload_proto)
def NvAPI_Unload() -> int:
  return _NvAPI_Unload()

# Get GPU list
_NvAPI_EnumPhysicalGPUs_ptr   = nvapi_QueryInterface(0xe5ac921f)
_NvAPI_EnumPhysicalGPUs_proto = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_void_p, ctypes.c_void_p)
_NvAPI_EnumPhysicalGPUs       = ctypes.cast(_NvAPI_EnumPhysicalGPUs_ptr, _NvAPI_EnumPhysicalGPUs_proto)
def NvAPI_EnumPhysicalGPUs(gpu_array: ctypes.c_void_p, gpu_count: ctypes.c_void_p) -> int:
  return _NvAPI_EnumPhysicalGPUs(gpu_array, gpu_count)

# Force Perfomance State
_NvAPI_GPU_SetForcePstate_ptr   = nvapi_QueryInterface(0x025bfb10)
_NvAPI_GPU_SetForcePstate_proto = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_void_p, ctypes.c_int, ctypes.c_int)
_NvAPI_GPU_SetForcePstate       = ctypes.cast(_NvAPI_GPU_SetForcePstate_ptr, _NvAPI_GPU_SetForcePstate_proto)
def NvAPI_GPU_SetForcePstate(gpu: ctypes.c_void_p, state: int, int3: int) -> int:
  return _NvAPI_GPU_SetForcePstate(gpu, state, int3)

# Function to set performance state
def set_performance_state(gpu_array, gpu_count, gpu_id, pstate):
  if not (0 <= gpu_id < gpu_count):
    print(f"Invalid GPU ID: {args.id}")
    return

  if NvAPI_GPU_SetForcePstate(gpu_array[gpu_id], pstate, 2) == 0:
    print(f"Performance state has been set successfully for gpu #{gpu_id}")
  else:
    print(f"Failed to set performance state for gpu #{gpu_id}")

# Entry point
def main():
  # Argument parser setup
  parser = argparse.ArgumentParser()
  parser.add_argument("-i", "--id", type=int, dest="id", help="Target a specific GPU.")
  parser.add_argument("-ps", "--performance-state", dest="pstate", default=16, type=int, help="Specifies performance state.")

  # Command line arguments
  args = parser.parse_args()

  # Array to hold GPU handles
  gpu_array = (ctypes.c_void_p * 64)()

  # Integer to hold GPU count
  gpu_count = ctypes.pointer(ctypes.c_int32())

  # Initialize NvAPI
  if NvAPI_Initialize() != 0:
    print("Failed to initialize NvAPI")
    return

  # Enumerate GPUs
  if NvAPI_EnumPhysicalGPUs(gpu_array, gpu_count) != 0:
    print("Failed to enumerate GPUs")
    return

  # GPU count as int
  gpu_count_int = gpu_count.contents.value

  # Set performance state for specified GPU or all GPUs
  if args.id is None:
    for i in range(gpu_count_int):
      set_performance_state(gpu_array, gpu_count_int, i, args.pstate)
  else:
    set_performance_state(gpu_array, gpu_count_int, args.id, args.pstate)

  # Unload NvAPI
  if NvAPI_Unload() != 0:
    print("Failed to unload NvAPI")

if __name__ == "__main__":
  main()
